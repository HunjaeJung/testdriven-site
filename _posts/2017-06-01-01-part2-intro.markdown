---
title: Introduction
layout: post
date: 2017-06-01 23:59:59
permalink: part-two-intro
part: 2
share: true
---

In Part 2, we'll split the project into three distinct projects. We'll also add *code coverage* and *continuous integration* testing to ensure that each service can be run and tested independently from the whole. Finally, we'll add *ReactJS* to the client-side.

#### Structure

1. *flask-microservices-main* - Docker Compose files, Nginx, admin scripts
1. *flask-microservices-users* - Flask app
1. *flask-microservices-client* - client-side

#### Objectives

By the end of this part, you should be able to...

1. Manage services housed in multiple git repos from a single Docker Compose file
1. Utilize a git repo as the "build context" for Docker Compose
1. Run the unit and integration tests with code coverage
1. Work with each service independently without Docker
1. Configure Travis CI for continuous integration testing

---

WIP
